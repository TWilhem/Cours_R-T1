name: Update Files

# on:
#   schedule:
#     - cron: '0 12 * * 5'

on:
  push:
    branches:
      - main

jobs:
  update_files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get all files in 1er Semestre
      id: get-files
      run: |
        files=$(find ./1er\ Semestre -type f)
        echo "all_files<<EOF" >> $GITHUB_OUTPUT
        echo "$files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Process files
      id: process-files
      shell: bash
      run: |
        set +e  # Désactive la sortie immédiate en cas d'erreur
        declare -A FilesByDirAndType
        NonR1Files=()
        
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then  # Vérifie si le fichier existe
            if [[ "$file" =~ /1er\ Semestre/(R1[0-9]{2})/(CM|TD|TP)/ ]]; then
              parent_dir=${BASH_REMATCH[1]}
              file_type=${BASH_REMATCH[2]}
              FilesByDirAndType["$parent_dir,$file_type"]+="$file"$'\n'
            elif [[ "$file" =~ /1er\ Semestre/(R1[0-9]{2})/ ]]; then
              parent_dir=${BASH_REMATCH[1]}
              FilesByDirAndType["$parent_dir,Autres"]+="$file"$'\n'
            else
              NonR1Files+=("$file")
            fi
          else
            echo "Avertissement : Le fichier $file n'existe pas ou n'est pas accessible."
          fi
        done <<< "${{ steps.get-files.outputs.all_files }}"
        
        total_count=0
        current_dir=""
        for key in $(echo "${!FilesByDirAndType[@]}" | tr ' ' '\n' | sort); do
          IFS=',' read -r dir type <<< "$key"
          if [[ "$dir" != "$current_dir" ]]; then
            [[ -n "$current_dir" ]] && echo ""
            echo "Fichiers dans /$dir/"
            current_dir="$dir"
          fi
          echo "  $type:"
          while IFS= read -r file; do
            echo "    $file"
            ((total_count++))
          done <<< "${FilesByDirAndType[$key]}"
        done
        
        echo "fichier_count=$total_count" >> $GITHUB_OUTPUT 
        
        if [ ${#NonR1Files[@]} -gt 0 ]; then
          echo "Fichiers hors des répertoires R1** :"
          printf '%s\n' "${NonR1Files[@]}"
        fi
        
        exit 0  # Force une sortie réussie
        

    # - name: Update README files
    #   if: steps.process-files.outputs.fichier_count > 0
    #   run: |
    #     update_readme() {
    #       local file="$1"
    #       local readme_file="$(dirname "$file")/README.md"
    #       local filename=$(basename "$file")
    #       local file_type=""
          
    #       if [[ "$filename" == CM* ]]; then
    #         file_type="CM"
    #       elif [[ "$filename" == TD* ]]; then
    #         file_type="TD"
    #       elif [[ "$filename" == TP* ]]; then
    #         file_type="TP"
    #       else
    #         file_type="Autre"
    #       fi
          
    #       if [ -f "$readme_file" ]; then
    #         sed -i "/^## $file_type$/a - [$filename](./$filename)" "$readme_file"
    #       fi
    #     }
        
    #     IFS='|' read -ra files <<< "${{ steps.get-files.outputs.all_files }}"
    #     for file in "${files[@]}"; do
    #       if [[ "$file" != *"README.md" ]]; then
    #         update_readme "$file"
    #       fi
    #     done

    # - name: Commit changes
    #   if: steps.process-files.outputs.fichier_count > 0
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add .
    #     git diff --quiet && git diff --staged --quiet || git commit -m "Mise à jour automatique des fichiers README"
    #     git push