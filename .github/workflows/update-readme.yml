name: Update Files

# on:
#   schedule:
#     - cron: '0 12 * * 5'

on:
  push:
    branches:
      - main

jobs:
  update_files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get all files in 1er Semestre
      id: get-files
      run: |
        files=$(find ./1er\ Semestre -type f)
        echo "all_files<<EOF" >> $GITHUB_OUTPUT
        echo "$files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Process files
      id: process-files
      shell: bash
      run: |
        declare -A FilesByDirAndType
        NonR1Files=()
        
        while IFS= read -r file; do
          if [[ "$file" =~ /1er\ Semestre/R1[0-9]{2}/(CM|TD|TP)/ ]]; then
            parent_dir=$(echo "$file" | grep -oP '/1er Semestre/R1\d{2}')
            file_type=${BASH_REMATCH[1]}
            key="${parent_dir}/${file_type}"
            FilesByDirAndType["$key"]+="$file"$'\n'
          elif [[ "$file" =~ /1er\ Semestre/R1[0-9]{2}/ ]]; then
            parent_dir=$(echo "$file" | grep -oP '/1er Semestre/R1\d{2}')
            key="${parent_dir}/Autres"
            FilesByDirAndType["$key"]+="$file"$'\n'
          else
            NonR1Files+=("$file")
          fi
        done <<< "${{ steps.get-files.outputs.all_files }}"
        
        total_count=0
        for key in "${!FilesByDirAndType[@]}"; do
          IFS='/' read -r dir type <<< "$key"
          echo "Fichiers dans $dir - $type :"
          echo "${FilesByDirAndType[$key]}"
          count=$(echo -n "${FilesByDirAndType[$key]}" | grep -c '^')
          total_count=$((total_count + count))
          echo ""
        done
        
        echo "fichier_count=$total_count" >> $GITHUB_OUTPUT 
        
        if [ ${#NonR1Files[@]} -gt 0 ]; then
          echo "Fichiers hors des répertoires R1** :"
          printf '%s\n' "${NonR1Files[@]}"
        fi
        

    # - name: Update README files
    #   if: steps.process-files.outputs.fichier_count > 0
    #   run: |
    #     update_readme() {
    #       local file="$1"
    #       local readme_file="$(dirname "$file")/README.md"
    #       local filename=$(basename "$file")
    #       local file_type=""
          
    #       if [[ "$filename" == CM* ]]; then
    #         file_type="CM"
    #       elif [[ "$filename" == TD* ]]; then
    #         file_type="TD"
    #       elif [[ "$filename" == TP* ]]; then
    #         file_type="TP"
    #       else
    #         file_type="Autre"
    #       fi
          
    #       if [ -f "$readme_file" ]; then
    #         sed -i "/^## $file_type$/a - [$filename](./$filename)" "$readme_file"
    #       fi
    #     }
        
    #     IFS='|' read -ra files <<< "${{ steps.get-files.outputs.all_files }}"
    #     for file in "${files[@]}"; do
    #       if [[ "$file" != *"README.md" ]]; then
    #         update_readme "$file"
    #       fi
    #     done

    # - name: Commit changes
    #   if: steps.process-files.outputs.fichier_count > 0
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git add .
    #     git diff --quiet && git diff --staged --quiet || git commit -m "Mise à jour automatique des fichiers README"
    #     git push