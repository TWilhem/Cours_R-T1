name: Update Files

on:
  push:
    branches:
      - main

jobs:
  update_files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get all files in 1er Semestre
      id: get-files
      run: |
        files=$(find ./1er\ Semestre -type f)
        echo "all_files<<EOF" >> $GITHUB_OUTPUT
        echo "$files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Process files and create README.md
      id: process-files
      shell: bash
      run: |
        set -x  # Active le mode de débogage
        set +e  # Désactive la sortie immédiate en cas d'erreur
        
        declare -A FilesByDirAndType
        NonR1Files=()
        
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            if [[ "$file" =~ /1er\ Semestre/(R1[0-9]{2})/(CM|TD|TP)/ ]]; then
              parent_dir=${BASH_REMATCH[1]}
              file_type=${BASH_REMATCH[2]}
              FilesByDirAndType["$parent_dir,$file_type"]+="$file"$'\n'
            elif [[ "$file" =~ /1er\ Semestre/(R1[0-9]{2})/ ]]; then
              parent_dir=${BASH_REMATCH[1]}
              FilesByDirAndType["$parent_dir,Autres"]+="$file"$'\n'
            else
              NonR1Files+=("$file")
            fi
          else
            echo "Avertissement : Le fichier $file n'existe pas ou n'est pas accessible."
          fi
        done <<< "${{ steps.get-files.outputs.all_files }}"
        
        total_count=0
        current_dir=""
        for key in $(echo "${!FilesByDirAndType[@]}" | tr ' ' '\n' | sort); do
          IFS=',' read -r dir type <<< "$key"
          if [[ "$dir" != "$current_dir" ]]; then
            [[ -n "$current_dir" ]] && echo "" >> "./1er Semestre/$current_dir/README.md"
            echo "# Ressources pour $dir" > "./1er Semestre/$dir/README.md"
            echo "" >> "./1er Semestre/$dir/README.md"
            echo "Ce répertoire contient les ressources pour le module $dir." >> "./1er Semestre/$dir/README.md"
            echo "" >> "./1er Semestre/$dir/README.md"
            echo "## Structure du répertoire" >> "./1er Semestre/$dir/README.md"
            echo "" >> "./1er Semestre/$dir/README.md"
            echo "- CM : Cours magistraux" >> "./1er Semestre/$dir/README.md"
            echo "- TD : Travaux dirigés" >> "./1er Semestre/$dir/README.md"
            echo "- TP : Travaux pratiques" >> "./1er Semestre/$dir/README.md"
            echo "- Autres : Ressources supplémentaires" >> "./1er Semestre/$dir/README.md"
            echo "" >> "./1er Semestre/$dir/README.md"
            echo "## Contenu" >> "./1er Semestre/$dir/README.md"
            echo "" >> "./1er Semestre/$dir/README.md"
            current_dir="$dir"
          fi
          echo "### $type:" >> "./1er Semestre/$dir/README.md"
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              filename=$(basename "$file")
              relative_path=$(realpath --relative-to="./1er Semestre/$dir" "$file")
              echo "- [$filename]($relative_path)" >> "./1er Semestre/$dir/README.md"
              ((total_count++))
            fi
          done <<< "${FilesByDirAndType[$key]}"
          echo "" >> "./1er Semestre/$dir/README.md"
        done
        
        echo "fichier_count=$total_count" >> $GITHUB_OUTPUT 
        
        if [ ${#NonR1Files[@]} -gt 0 ]; then
          echo "Fichiers hors des répertoires R1** :"
          printf '%s\n' "${NonR1Files[@]}"
        fi

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git status
        if git diff --staged --quiet; then
          echo "Aucun changement à commiter"
        else
          git commit -m "Mise à jour des fichiers README.md avec des liens relatifs"
          echo "Changements commités"
        fi

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}